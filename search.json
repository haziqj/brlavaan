[{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://haziqj.ml/brlavaan/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://haziqj.ml/brlavaan/articles/basics.html","id":"structural-equation-models","dir":"Articles","previous_headings":"","what":"Structural equation models","title":"The basics","text":"Let yi∈ℝpy_i\\\\mathbb R^p, =1,…,ni=1,\\dots,n independent multivariate data observations. general form structural equation models following: yi=ν+Ληi+ϵi, y_i = \\nu + \\Lambda \\eta_i + \\epsilon_i,  {#eq-measurement} errors ϵi∼N(0,Θ)\\epsilon_i \\sim \\operatorname{N}(0,\\Theta) assumed normally distributed, latent factors ηi\\eta_i related structural part model: ηi=α+Bηi+ζi, \\eta_i = \\alpha + B \\eta_i + \\zeta_i,  {#eq-structural} ζi∼N(0,Ψ)\\zeta_i \\sim \\operatorname{N}(0,\\Psi) structural disturbances, BB matrix regression coefficients 0 diagonals. structural model can rewritten ηi=(−B)−1α+(−B)−1ζi\\eta_i = (- B)^{-1} \\alpha + (- B)^{-1} \\zeta_i. Plugging @eq-measurement, get reduced form model, yi∼Np(μ,Σ)y_i \\sim \\operatorname{N}_p (\\mu, \\Sigma), μ=μ(θ)=ν+Λ(−B)−1αΣ=Σ(θ)=Λ(−B)−1Ψ(−B)−⊤Λ⊤+Θ. \\begin{align} \\mu &= \\mu(\\theta) = \\nu + \\Lambda (- B)^{-1} \\alpha \\\\ \\Sigma &= \\Sigma(\\theta) = \\Lambda(- B)^{-1} \\Psi (- B)^{-\\top} \\Lambda^\\top + \\Theta. \\end{align}  denoted θ∈ℝm\\theta\\\\mathbb R^m collection free parameters (intercepts, loadings, regression coefficients, variances) model. Evidently, likelihood model given multivariate normal density: ℓ(θ)=−np2log(2π)−n2log|Σ|−12∑=1n(yi−μ)⊤Σ−1(yi−μ). \\ell(\\theta) = -\\frac{np}{2}\\log(2\\pi) - \\frac{n}{2}\\log|\\Sigma| - \\frac{1}{2}\\sum_{=1}^n (y_i - \\mu)^\\top \\Sigma^{-1} (y_i - \\mu). gradient log-likelihood function respect component θ\\theta appearing mean vector μ\\mu given ∂ℓ∂θμ=∂ℓ∂μ∂μ∂θμ=∑=1n(yi−μ)⊤Σ−1⋅∂μ∂θμ=n(y‾−μ)⊤Σ−1⋅∂μ∂θμ. \\begin{align} \\frac{\\partial\\ell}{\\partial \\theta_\\mu}  &= \\frac{\\partial\\ell}{\\partial \\mu} \\frac{\\partial \\mu}{\\partial \\theta_\\mu}  \\\\ &= \\sum_{=1}^n (y_i - \\mu)^\\top \\Sigma^{-1} \\cdot \\frac{\\partial \\mu}{\\partial \\theta_\\mu} \\\\ &= n (\\bar y - \\mu)^\\top \\Sigma^{-1} \\cdot \\frac{\\partial \\mu}{\\partial \\theta_\\mu}. \\end{align}  gradient log-likelihood function respect component θ\\theta appearing Σ\\Sigma given ∂ℓ∂θσ=⟨∂ℓ∂Σ,∂Σ∂θσ⟩=⟨−n2Σ−1+n2Σ−1SΣ−1,∂Σ∂θσ⟩=⟨n2E,∂Σ∂θσ⟩,. \\begin{align} \\frac{\\partial\\ell}{\\partial \\theta_\\sigma}  &= \\left\\langle \\frac{\\partial\\ell}{\\partial \\Sigma}, \\frac{\\partial \\Sigma}{\\partial \\theta_\\sigma}  \\right\\rangle \\\\ &= \\left\\langle -\\frac{n}{2} \\Sigma^{-1} + \\frac{n}{2} \\Sigma^{-1}S\\Sigma^{-1}  , \\frac{\\partial \\Sigma}{\\partial \\theta_\\sigma} \\right\\rangle \\\\ &= \\left\\langle \\frac{n}{2} E , \\frac{\\partial \\Sigma}{\\partial \\theta_\\sigma} \\right\\rangle, \\end{align}.  SS (biased) sample covariance matrix, E=Σ−1(S−Σ)Σ−1E = \\Sigma^{-1}(S-\\Sigma)\\Sigma^{-1}.","code":""},{"path":"https://haziqj.ml/brlavaan/articles/basics.html","id":"growth-curve-model","dir":"Articles","previous_headings":"","what":"Growth curve model","title":"The basics","text":"growth curve model, latent intercept ii slope ss (q=2q=2). five parameters latent component: Two intercepts α1\\alpha_1 α2\\alpha_2, three unique variances covariances Ψ11\\Psi_{11}, Ψ22\\Psi_{22}, Ψ12\\Psi_{12}. loadings “intercept” latent variable fixed 1, whereas loadings “slope” latent variable increment 0 9. Thus, Λ\\Lambda fixed 10×210 \\times 2 matrix. Furthermore, observed variables yjy_j, j=1,…,pj=1,\\dots,p share common residual error variance vv. total, six parameters estimated model (order): θ=(Ψ11,α1,Ψ22,α2,Ψ12,v)\\theta = (\\Psi_{11}, \\alpha_1, \\Psi_{22}, \\alpha_2, \\Psi_{12}, v).  growth curve model, gradients simplified somewhat: ∂ℓ(θ)∂α=nΛ⊤Σ−1(y‾−μ)\\frac{\\partial\\ell(\\theta)}{\\partial \\alpha} = n \\Lambda^\\top \\Sigma^{-1} (\\bar y - \\mu) ∂ℓ∂Ψij=n2tr{Λ⊤EΛ∂Ψ∂Ψij}\\frac{\\partial\\ell}{\\partial \\Psi_{ij}} = \\frac{n}{2} \\operatorname{tr} \\left\\{\\Lambda^\\top E \\Lambda \\frac{\\partial \\Psi}{\\partial \\Psi_{ij}} \\right\\} ∂ℓ∂v=n2tr(E)\\frac{\\partial\\ell}{\\partial v} = \\frac{n}{2} \\operatorname{tr}(E) implementation R code also straightforward (see R/40-manual_growth.R). Compare behaviour eBR iBR methods using lavaan’s internals (via fit_sem()) using manual functions (via fit_growth()).","code":"library(tictoc) set.seed(26) dat <- gen_data_growth(n = 15, rel = 0.5, dist = \"Normal\", scale = 1 / 10) mod <- txt_mod_growth(0.5) tru <- truth(dat)  tic.clearlog() fit <- list()  tic(\"ML: lavaan\") fit$lav <- growth(mod, dat, start = tru) toc(log = TRUE) #> ML: lavaan: 0.214 sec elapsed  tic(\"ML: brlavaan\") fit$ML <- fit_sem(mod, dat, \"none\", lavfun = \"growth\", start = tru) toc(log = TRUE) #> ML: brlavaan: 0.029 sec elapsed tic(\"eBR: brlavaan\") fit$eBR <- fit_sem(mod, dat, \"explicit\", lavfun = \"growth\", start = tru) toc(log = TRUE) #> eBR: brlavaan: 0.469 sec elapsed tic(\"iBR: brlavaan\") fit$iBR <- fit_sem(mod, dat, \"implicit\", lavfun = \"growth\", start = tru) toc(log = TRUE) #> iBR: brlavaan: 1.789 sec elapsed  tic(\"ML: manual\") fit$MLman <- fit_growth(mod, dat, \"none\", start = tru[1:6]) toc(log = TRUE) #> ML: manual: 0.032 sec elapsed tic(\"eBR: manual\") fit$eBRman <- fit_growth(mod, dat, \"explicit\", start = tru[1:6]) toc(log = TRUE) #> eBR: manual: 1.944 sec elapsed tic(\"iBR: manual\") fit$iBRman <- fit_growth(mod, dat, \"implicit\", start = tru[1:6]) toc(log = TRUE) #> iBR: manual: 7.752 sec elapsed  # Compare c(list(truth = tru[1:6]), lapply(fit, \\(x) round(coef(x)[1:6], 5))) #> $truth #>  i~~i   i~1  s~~s   s~1  i~~s     v  #>  2.75  0.00  0.50  0.00  0.20 13.00  #>  #> $lav #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  3.84160  0.18158  0.78045 -0.12988 -0.52747 12.75903  #>  #> $ML #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  3.84163  0.18157  0.78045 -0.12988 -0.52748 12.75907  #>  #> $eBR #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  4.39245  0.18153  0.84284 -0.12985 -0.60927 12.75897  #>  #> $iBR #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  4.28355  0.18157  0.82938 -0.12988 -0.59457 12.75902  #>  #> $MLman #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  3.84163  0.18157  0.78045 -0.12988 -0.52748 12.75907  #>  #> $eBRman #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  4.39129  0.18472  0.84293 -0.13016 -0.60957 12.75895  #>  #> $iBRman #>     i~~i      i~1     s~~s      s~1     i~~s        v  #>  2.79306 -0.02384  0.77537 -0.05984 -0.07414 13.09462 sapply(fit, \\(x) if (inherits(x, \"lavaan\")) x@optim$converged else x$converged) #>    lav     ML    eBR    iBR  MLman eBRman iBRman  #>   TRUE   TRUE   TRUE   TRUE   TRUE   TRUE  FALSE"},{"path":"https://haziqj.ml/brlavaan/articles/basics.html","id":"two-factor-model","dir":"Articles","previous_headings":"","what":"Two factor model","title":"The basics","text":"two factor model, two latent variables η1\\eta_1 η2\\eta_2, indicated three observed variables, (y1,y2,y3)(y_1, y_2, y_3) (y4,y5,y6)(y_4, y_5, y_6) respectively. observed variable corresponding error ϵj∼N(0,Θj,j)\\epsilon_j \\sim N(0, \\Theta_{j,j}), leading six variance parameters. latent variables regression path η1\\eta_1 η2\\eta_2 parameter β\\beta, variance parameter Ψ11\\Psi_{11} Ψ22\\Psi_{22} respectively. factor loadings, fix Λ11\\Lambda_{11} Λ42\\Lambda_{42} 11 identifiability. thirteen parameters estimated two factor model θ=(Λ21,Λ31,Λ52,Λ62,β,Θ11,Θ22,Θ33,Θ44,Θ55,Θ66,Ψ11,Ψ22)\\theta = (\\Lambda_{21}, \\Lambda_{31}, \\Lambda_{52}, \\Lambda_{62}, \\beta, \\Theta_{11}, \\Theta_{22}, \\Theta_{33}, \\Theta_{44}, \\Theta_{55}, \\Theta_{66}, \\Psi_{11}, \\Psi_{22}). (order code).  Due diagonal matrices, express covariance parameters diagonal covariance matrices, entries zero. ∂ℓ∂Λij=ntr{MΛ⊤E∂Λ∂Λij}=n[MΛ⊤E]ji\\frac{\\partial \\ell}{\\partial \\Lambda_{ij}} = n \\operatorname{tr}\\left\\{ M \\Lambda^\\top E \\frac{\\partial\\Lambda}{\\partial \\Lambda_{ij}} \\right\\} = n[M\\Lambda^\\top E]_{j } ∂ℓ∂β=ntr{Ψ(+B⊤)Λ⊤EΛ∂B∂β}=n[Ψ(+B⊤)Λ⊤EΛ]12\\frac{\\partial \\ell}{\\partial \\beta} = n \\operatorname{tr}\\left\\{ \\Psi (+ B^\\top) \\Lambda^\\top E \\Lambda \\frac{\\partial B}{\\partial \\beta} \\right\\} = n[\\Psi (+ B^\\top) \\Lambda^\\top E \\Lambda]_{12} ∂ℓ∂diag(Θ)=n2diag(E)\\frac{\\partial \\ell}{\\partial \\text{diag}(\\Theta)} = \\frac{n}{2}\\text{diag}(E) ∂ℓ∂diag(Ψ)=n2diag((−B)−⊤Λ⊤EΛ(−B)−1)\\frac{\\partial \\ell}{\\partial \\text{diag}(\\Psi)} = \\frac{n}{2}\\text{diag}\\left((- B)^{-\\top}\\Lambda^\\top E \\Lambda (-B)^{-1}\\right) M=(−B)−1Ψ(−B)−⊤M = (- B)^{-1} \\Psi (- B)^{-\\top}.","code":""},{"path":"https://haziqj.ml/brlavaan/articles/plugin-penalty.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Plugin penalties","text":"iRBM method, can use additional plugin penalty objective function. plugin penalty acts shrink parameter estimates towards value, thus ensuring estimates finite. cases might make sense penalties shrink zero, others, bit harsh (e.g. variance parameters parameters truth far away zero). cases, useful implement bounded penalty, function acts within pre-specified parameter range, penalises objective function parameter estimates stray boundaries. Yet another penalty function explored penalty function shrinks estimates towards “ideal” variance-covariance matrix. penalty functions: Ridge penalty (target x*x^*) f(x)=‖x−x*‖2 f(x) = \\Vert x - x^* \\Vert^2  , x*x^* ideal parameter values, used conjunction bounds x*x^* midpoint bounds. Ridge penalty bounds l≤x≤ul \\leq x \\leq u f(x)={0if l≤x≤u‖x−l‖2if x<l‖x−u‖2if x>u f(x) = \\begin{cases} 0 & \\text{} l \\leq x \\leq u \\\\ \\Vert x - l \\Vert^2 & \\text{} x < l \\\\ \\Vert x - u \\Vert^2 & \\text{} x > u \\end{cases} Huber penalty bounds l≤x≤ul \\leq x \\leq u f(x)={12y2if |y|<τ,−τ(τ2−|y|)|y|≥τ, f(x) =  \\begin{cases}  \\frac{1}{2} y^2 & \\text{} |y| < \\tau, \\\\[10pt] -\\tau \\left(\\frac{\\tau}{2} - |y|\\right) & \\text{} |y| \\geq \\tau, \\end{cases}  τ\\tau threshold (defaults 1), y={log(x−lu−x)l,u<∞log(x−l)l<∞,u=∞0if l,u=∞ y = \\begin{cases}  \\log\\left(\\frac{x - l}{u - x}\\right) & \\text{} l,u < \\infty \\\\ \\log(x - l) & \\text{} l < \\infty, u = \\infty \\\\ 0 & \\text{} l,u = \\infty \\end{cases} Matrix norm target matrix developed!","code":""},{"path":"https://haziqj.ml/brlavaan/articles/plugin-penalty.html","id":"comparison-of-penalty-functions","dir":"Articles","previous_headings":"","what":"Comparison of penalty functions","title":"Plugin penalties","text":"Comparison penalty functions.","code":"lb <- 0 ub <- 3 tibble(   x = seq(-2, 5, length.out = 250) ) |>   rowwise() |>   mutate(     ridge = brlavaan:::pen_ridge(x),     ridge_bounded = brlavaan:::pen_ridge_bound(x, lb = lb, ub = ub),     huber_bounded = brlavaan:::pen_huber(x, lb = lb, ub = ub),     huber_left_bounded = brlavaan:::pen_huber(x, lb = lb, ub = Inf)   ) |>    pivot_longer(-x) |>   ggplot(aes(x, value, color = name)) +   annotate(\"rect\", xmin = lb, xmax = ub, ymin = -Inf, ymax = Inf, alpha = 0.2) +   geom_line() +   geom_vline(xintercept = c(lb, ub), linetype = \"dashed\") +   labs(y = \"f(x)\")"},{"path":"https://haziqj.ml/brlavaan/articles/plugin-penalty.html","id":"comparing-huber-penalty-thresholds","dir":"Articles","previous_headings":"","what":"Comparing Huber penalty thresholds","title":"Plugin penalties","text":"Comparison Huber penalty functions different thresholds. Comparison left-bounded Huber penalty functions different thresholds.","code":"lb <- -1 ub <- 4 tibble(   x = seq(-2, 5, length.out = 250) ) |>   rowwise() |>   mutate(     `0.5` = brlavaan:::pen_huber(x, lb = lb, ub = ub, thres = 0.5),     `1` = brlavaan:::pen_huber(x, lb = lb, ub = ub, thres = 1),     `2` = brlavaan:::pen_huber(x, lb = lb, ub = ub, thres = 2)   ) |>    pivot_longer(-x) |>   ggplot(aes(x, value, color = name)) +   annotate(\"rect\", xmin = lb, xmax = ub, ymin = -Inf, ymax = Inf, alpha = 0.2) +   geom_line() +   geom_vline(xintercept = c(lb, ub), linetype = \"dashed\") +   labs(y = \"f(x)\", col = \"Threshold\") lb <- -1 ub <- 4 tibble(   x = seq(-2, 5, length.out = 250) ) |>   rowwise() |>   mutate(     `0.5` = brlavaan:::pen_huber(x, lb = lb, ub = Inf, thres = 0.5),     `1` = brlavaan:::pen_huber(x, lb = lb, ub = Inf, thres = 1),     `2` = brlavaan:::pen_huber(x, lb = lb, ub = Inf, thres = 2)   ) |>    pivot_longer(-x) |>   ggplot(aes(x, value, color = name)) +   # annotate(\"rect\", xmin = lb, xmax = ub, ymin = -Inf, ymax = Inf, alpha = 0.2) +   geom_line() +   geom_vline(xintercept = c(lb), linetype = \"dashed\") +   labs(y = \"f(x)\", col = \"Threshold\")"},{"path":"https://haziqj.ml/brlavaan/articles/plugin-penalty.html","id":"creating-your-own-plugin-penalty-function","dir":"Articles","previous_headings":"","what":"Creating your own plugin penalty function","title":"Plugin penalties","text":"developed…","code":""},{"path":"https://haziqj.ml/brlavaan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Haziq Jamil. Author, maintainer. Yves Rosseel. Contributor. Oliver Kemp. Contributor. Ioannis Kosmidis. Contributor.","code":""},{"path":"https://haziqj.ml/brlavaan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jamil H, Rosseel Y, Kemp O, Kosmidis (2025). “Bias-Reduced Estimation Structural Equation Models.” Manuscript preparation.","code":"@Article{,   title = {Bias-Reduced {Estimation} of {Structural} {Equation} {Models}},   author = {Haziq Jamil and Yves Rosseel and Oliver Kemp and Ioannis Kosmidis},   journal = {Manuscript in preparation},   year = {2025}, }"},{"path":"https://haziqj.ml/brlavaan/index.html","id":"brlavaan","dir":"","previous_headings":"","what":"Bias-Reduced Latent Variable Analysis","title":"Bias-Reduced Latent Variable Analysis","text":"Apply empirical bias reduced methods fit variety latent variable models, including confirmatory factor analysis, structural equation modelling, latent growth curve models.","code":""},{"path":"https://haziqj.ml/brlavaan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bias-Reduced Latent Variable Analysis","text":"can install development version brlavaan GitHub :","code":"# install.packages(\"pak\") pak::pak(\"haziqj/sem-bias\")"},{"path":"https://haziqj.ml/brlavaan/index.html","id":"in-brief","dir":"","previous_headings":"","what":"In brief","title":"Bias-Reduced Latent Variable Analysis","text":"brlavaan provides explicit implicit bias-reduction maximum likelihood estimation latent variable models lavaan compatible. main functions brsem() structural equation models. brcfa() confirmatory factor analysis models. brgrowth() growth curve models. brlavaan() general interface fit model supported lavaan. Note convention br prefix functions package. distinguish bias-reduced methods standard maximum likelihood methods provided lavaan. [!WARNING] Plugin penalties yet supported.","code":""},{"path":"https://haziqj.ml/brlavaan/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bias-Reduced Latent Variable Analysis","text":"’s beloved classic example – Bollen (1989)’s political democracy example.  default, implicit reduced bias ML estimator used. switch explicit RBM, add plugin penalty term, specify list estimator.args argument. switch bias reduction, set rbm = \"none\":","code":"library(brlavaan) #> Loading required package: lavaan #> This is lavaan 0.6-19 #> lavaan is FREE software! Please report any bugs. data(\"PoliticalDemocracy\", package = \"lavaan\") mod <- \"   # latent variables    ind60 =~ x1 + x2 + x3    dem60 =~ y1 + y2 + y3 + y4    dem65 =~ y5 + y6 + y7 + y8        # regressions   dem60 ~ ind60    dem65 ~ ind60 + dem60       # residual covariances    y1 ~~ y5   y2 ~~ y4 + y6    y3 ~~ y7    y4 ~~ y8   y6 ~~ y8 \"  # lavaan fit (ML) fit_lav <- sem(model = mod, data = PoliticalDemocracy)  # Bias-reduced fit (by default, implicit method is performed) fit_iRBM <- brsem(model = mod, data = PoliticalDemocracy)  summary(fit_iRBM) #> brlavaan 0.1.1.9005 ended normally after 72 iterations #>  #>   Estimator                                         ML #>   Bias reduction method                       IMPLICIT #>   Plugin penalty                                  NONE #>   Optimization method                           NLMINB #>   Number of model parameters                        31 #>  #>   Number of observations                            75 #>  #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Observed #>   Observed information based on                Hessian #>  #> Latent Variables: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   ind60 =~                                             #>     x1                1.000                            #>     x2                2.176    0.139   15.607    0.000 #>     x3                1.814    0.153   11.886    0.000 #>   dem60 =~                                             #>     y1                1.000                            #>     y2                1.254    0.185    6.791    0.000 #>     y3                1.050    0.148    7.093    0.000 #>     y4                1.254    0.150    8.374    0.000 #>   dem65 =~                                             #>     y5                1.000                            #>     y6                1.185    0.171    6.932    0.000 #>     y7                1.268    0.159    7.970    0.000 #>     y8                1.257    0.162    7.750    0.000 #>  #> Regressions: #>                    Estimate  Std.Err  z-value  P(>|z|) #>   dem60 ~                                              #>     ind60             1.483    0.400    3.712    0.000 #>   dem65 ~                                              #>     ind60             0.570    0.236    2.417    0.016 #>     dem60             0.832    0.098    8.510    0.000 #>  #> Covariances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>  .y1 ~~                                                #>    .y5                0.646    0.382    1.693    0.090 #>  .y2 ~~                                                #>    .y4                1.292    0.707    1.828    0.068 #>    .y6                2.140    0.732    2.923    0.003 #>  .y3 ~~                                                #>    .y7                0.816    0.640    1.275    0.202 #>  .y4 ~~                                                #>    .y8                0.407    0.476    0.856    0.392 #>  .y6 ~~                                                #>    .y8                1.312    0.572    2.294    0.022 #>  #> Variances: #>                    Estimate  Std.Err  z-value  P(>|z|) #>    .x1                0.083    0.020    4.071    0.000 #>    .x2                0.122    0.072    1.699    0.089 #>    .x3                0.472    0.091    5.169    0.000 #>    .y1                1.896    0.481    3.943    0.000 #>    .y2                7.362    1.353    5.443    0.000 #>    .y3                5.161    1.004    5.143    0.000 #>    .y4                3.198    0.779    4.107    0.000 #>    .y5                2.406    0.513    4.694    0.000 #>    .y6                4.919    0.896    5.492    0.000 #>    .y7                3.474    0.748    4.642    0.000 #>    .y8                3.271    0.719    4.547    0.000 #>     ind60             0.447    0.086    5.197    0.000 #>    .dem60             4.019    0.958    4.197    0.000 #>    .dem65             0.203    0.231    0.880    0.379  # Should be different tinytest::expect_equal(coef(fit_iRBM), coef(fit_lav)) #> ----- FAILED[data]: <--> #>  call| tinytest::expect_equal(coef(fit_iRBM), coef(fit_lav)) #>  diff| Mean relative difference: 0.01134476 # for explicit RBM fit <- brsem(model = mod, data = PoliticalDemocracy,               estimator.args = list(rbm = \"explicit\"))   # for implicit RBM with plugin penalty fit <- brsem(model = mod, data = PoliticalDemocracy,               estimator.args = list(rbm = \"implicit\",                                     plugin_penalty = brlavaan:::pen_huber)) fit_ML  <- brsem(mod, PoliticalDemocracy, estimator.args = list(rbm = \"none\")) tinytest::expect_equal(    coef(fit_ML),    coef(fit_lav),    tolerance = 1e-4 ) #> ----- PASSED      : <--> #>  call| tinytest::expect_equal(coef(fit_ML), coef(fit_lav), tolerance = 1e-04)"},{"path":"https://haziqj.ml/brlavaan/reference/brcfa.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit confirmatory factor analysis model using empirical bias-reducing methods — brcfa","title":"Fit confirmatory factor analysis model using empirical bias-reducing methods — brcfa","text":"Fit confirmatory factor analysis model using empirical bias-reducing methods","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brcfa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit confirmatory factor analysis model using empirical bias-reducing methods — brcfa","text":"","code":"brcfa(   model,   data,   estimator = \"ML\",   estimator.args = list(rbm = \"implicit\", plugin_pen = NULL),   information = \"observed\",   ... )"},{"path":"https://haziqj.ml/brlavaan/reference/brcfa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit confirmatory factor analysis model using empirical bias-reducing methods — brcfa","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. estimator estimator use. Currently \"ML\" supported. estimator.args list containing RBM arguments. Possible arguments rbm: type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM\", etc.) plugin_pen: type penalty use. One NULL, \"pen_ridge\", \"pen_ridge_bound\". info_pen type information matrix use penalty term. info_bias type information matrix use bias term explicit reduced bias method. information type information matrix use calculation standard errors. Defaults \"observed\", although \"expected\" \"first.order\" also permitted. ... Additional arguments pass lavaan::lavaan function.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brcfa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit confirmatory factor analysis model using empirical bias-reducing methods — brcfa","text":"object class brlavaan subclass lavaan::lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brgrowth.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit growth curve models using empirical bias-reducing methods — brgrowth","title":"Fit growth curve models using empirical bias-reducing methods — brgrowth","text":"Fit growth curve models using empirical bias-reducing methods","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brgrowth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit growth curve models using empirical bias-reducing methods — brgrowth","text":"","code":"brgrowth(   model,   data,   estimator = \"ML\",   estimator.args = list(rbm = \"implicit\", plugin_pen = NULL),   information = \"observed\",   ... )"},{"path":"https://haziqj.ml/brlavaan/reference/brgrowth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit growth curve models using empirical bias-reducing methods — brgrowth","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. estimator estimator use. Currently \"ML\" supported. estimator.args list containing RBM arguments. Possible arguments rbm: type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM\", etc.) plugin_pen: type penalty use. One NULL, \"pen_ridge\", \"pen_ridge_bound\". info_pen type information matrix use penalty term. info_bias type information matrix use bias term explicit reduced bias method. information type information matrix use calculation standard errors. Defaults \"observed\", although \"expected\" \"first.order\" also permitted. ... Additional arguments pass lavaan::lavaan function.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brgrowth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit growth curve models using empirical bias-reducing methods — brgrowth","text":"object class brlavaan subclass lavaan::lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan-class.html","id":null,"dir":"Reference","previous_headings":"","what":"brlavaan Class — brlavaan-class","title":"brlavaan Class — brlavaan-class","text":"class extends lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan-package.html","id":null,"dir":"Reference","previous_headings":"","what":"brlavaan: Bias-Reduced Latent Variable Analysis — brlavaan-package","title":"brlavaan: Bias-Reduced Latent Variable Analysis — brlavaan-package","text":"Apply empirical bias reduced methods fit variety latent variable models, including confirmatory factor analysis, structural equation modelling, latent growth curve models.","code":""},{"path":[]},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"brlavaan: Bias-Reduced Latent Variable Analysis — brlavaan-package","text":"Maintainer: Haziq Jamil haziq.jamil@gmail.com (ORCID) contributors: Yves Rosseel (ORCID) [contributor] Oliver Kemp [contributor] Ioannis Kosmidis (ORCID) [contributor]","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a latent variable model using bias-reducing methods — brlavaan","title":"Fit a latent variable model using bias-reducing methods — brlavaan","text":"Fit latent variable model using bias-reducing methods","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a latent variable model using bias-reducing methods — brlavaan","text":"","code":"brlavaan(   model,   data,   estimator = \"ML\",   estimator.args = list(rbm = \"implicit\", plugin_pen = NULL),   information = \"observed\",   lavfun = \"sem\",   ... )"},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a latent variable model using bias-reducing methods — brlavaan","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. estimator estimator use. Currently \"ML\" supported. estimator.args list containing RBM arguments. Possible arguments rbm: type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM\", etc.) plugin_pen: type penalty use. One NULL, \"pen_ridge\", \"pen_ridge_bound\". info_pen type information matrix use penalty term. info_bias type information matrix use bias term explicit reduced bias method. information type information matrix use calculation standard errors. Defaults \"observed\", although \"expected\" \"first.order\" also permitted. lavfun lavaan function use. Default \"sem\". ... Additional arguments pass lavaan::lavaan function.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a latent variable model using bias-reducing methods — brlavaan","text":"object class brlavaan subclass lavaan::lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brlavaan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a latent variable model using bias-reducing methods — brlavaan","text":"pen_ridge() function applies ridge regression style penalty $f(x) = || x ||^2$ shrinks parameters zero. pen_ridge_bound() function applies penalty shrinks parameters bounds parameter space. bounds calculated {lavaan} – see paper details. info_pen info_bias arguments default \"observed\". recommended change say \"expected\", especially small sample sizes bias-reducing properties estimators guaranteed.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brsem.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a structural equation model using empirical bias-reducing methods — brsem","title":"Fit a structural equation model using empirical bias-reducing methods — brsem","text":"Fit structural equation model using empirical bias-reducing methods","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brsem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a structural equation model using empirical bias-reducing methods — brsem","text":"","code":"brsem(   model,   data,   estimator = \"ML\",   estimator.args = list(rbm = \"implicit\", plugin_pen = NULL),   information = \"observed\",   ... )"},{"path":"https://haziqj.ml/brlavaan/reference/brsem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a structural equation model using empirical bias-reducing methods — brsem","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. estimator estimator use. Currently \"ML\" supported. estimator.args list containing RBM arguments. Possible arguments rbm: type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM\", etc.) plugin_pen: type penalty use. One NULL, \"pen_ridge\", \"pen_ridge_bound\". info_pen type information matrix use penalty term. info_bias type information matrix use bias term explicit reduced bias method. information type information matrix use calculation standard errors. Defaults \"observed\", although \"expected\" \"first.order\" also permitted. ... Additional arguments pass lavaan::lavaan function.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/brsem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a structural equation model using empirical bias-reducing methods — brsem","text":"object class brlavaan subclass lavaan::lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit growth curve models using lavaan syntax manually — fit_growth","title":"Fit growth curve models using lavaan syntax manually — fit_growth","text":"Fit growth curve models using lavaan syntax manually","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit growth curve models using lavaan syntax manually — fit_growth","text":"","code":"fit_growth(model, data, rbm = c(\"none\", \"explicit\", \"implicit\"), start = NULL)"},{"path":"https://haziqj.ml/brlavaan/reference/fit_growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit growth curve models using lavaan syntax manually — fit_growth","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. rbm type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM, etc.) start numeric vector starting values","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit growth curve models using lavaan syntax manually — fit_growth","text":"list following components: coefficients estimated coefficients stderr standard errors estimated coefficients bias bias estimated coefficients timing elapsed time converged Whether optimization converged optim optimization object","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_sem.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a structural equation model using bias-reducing methods — fit_sem","title":"Fit a structural equation model using bias-reducing methods — fit_sem","text":"workhorse function fit structural equation model using bias-reducing methods use simulations. endusers, recommend using brsem(), brcfa(), brgrowth() functions wrapper around function outputs something user-friendly.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_sem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a structural equation model using bias-reducing methods — fit_sem","text":"","code":"fit_sem(   model,   data,   rbm = c(\"implicit\", \"explicit\", \"none\"),   plugin_pen = NULL,   debug = FALSE,   lavfun = \"sem\",   maxgrad = FALSE,   fn.scale = 1,   ... )"},{"path":"https://haziqj.ml/brlavaan/reference/fit_sem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a structural equation model using bias-reducing methods — fit_sem","text":"model description user-specified model. Typically, model described using lavaan model syntax. See lavaan::model.syntax information. Alternatively, parameter table (eg. output lavaan::lavaanify() function) also accepted. data optional data frame containing observed variables used model. variables declared ordered factors, lavaan treat ordinal variables. rbm type RBM method use. One \"none\", \"explicit\", \"implicit\" (although, short forms accepted, e.g. \"exp\", \"iRBM, etc.) plugin_pen type penalty use. One NULL, \"pen_ridge\", \"pen_ridge_bound\". User-specified penalty functions possible. See description details. debug TRUE, function return list intermediate results debugging purposes. lavfun lavaan function use. Default \"sem\". maxgrad TRUE, function return maximum gradient value. fn.scale scaling factor log-likelihood function. ... Additional arguments pass lavaan::lavaan function.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/fit_sem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a structural equation model using bias-reducing methods — fit_sem","text":"object class brlavaan subclass lavaan::lavaan class.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data for simulation studies — gen-data","title":"Generate data for simulation studies — gen-data","text":"Generate data simulation studies.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data for simulation studies — gen-data","text":"","code":"gen_data_growth(   n = 100,   rel = 0.8,   dist = \"Normal\",   lavsim = FALSE,   scale = 1,   seed )  gen_data_twofac(   n = 100,   rel = 0.8,   dist = \"Normal\",   lavsim = FALSE,   meanstructure = FALSE,   scale = 1,   seed )"},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data for simulation studies — gen-data","text":"n Sample size rel Reliability growth curve model. Either 0.8 0.5. dist Distribution manifest variables. Either \"Normal\", \"Kurtosis\" \"Non-normal\". lavsim Logical. TRUE, simulate data using lavaan's lavaan::simulateData function. scale Scaling factor data. Default 1, growth curve model data, found smaller scale (1/10) can beneficial convergence. seed Seed reproducibility. meanstructure Logical (almost always FALSE). TRUE, include mean structure estimation. two-factor models (since growth models mean structure).","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data for simulation studies — gen-data","text":"data frame simulated data. convenience, true values (\"truth\") distribution (\"dist\") attached attributes.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate data for simulation studies — gen-data","text":"function truth() simple extractor function retrieve true values data set generated gen_data_growth() gen_data_twofac().","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate data for simulation studies — gen-data","text":"Dhaene, S., & Rosseel, Y. (2022). Resampling Based Bias Correction Small Sample SEM. Structural Equation Modeling: Multidisciplinary Journal, 29(5), 755–771. https://doi.org/10.1080/10705511.2022.2057999","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate data for simulation studies — gen-data","text":"Original code Sara Dhaene Yves Rosseel.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/gen-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate data for simulation studies — gen-data","text":"","code":"dat <- gen_data_growth(n = 100, rel = 0.8) head(dat) #>        Day0       Day1        Day2       Day3        Day4       Day5       Day6 #> 1  36.40856 -25.118196  -27.520137  -1.116821   -9.163532  -38.95116  -47.14138 #> 2 -58.74332 -47.643378 -107.799366 -94.357642 -106.091947 -116.45859 -156.21584 #> 3  -6.21620  18.441827    6.924438 -19.249225   12.677615  -39.48140  -28.20111 #> 4 -40.13273   2.767599  -51.366649 -61.071713  -61.725349  -78.29509  -75.41545 #> 5  28.39697  13.133848   -9.251629  11.505928  -17.268852  -11.58354  -20.68498 #> 6 -67.28882 -37.558663  -45.854703 -53.196658  -98.382638  -99.99884  -99.28088 #>         Day7       Day8       Day9 #> 1   -7.68428  -57.26876  -78.87382 #> 2 -132.82923 -159.82626 -191.52484 #> 3  -58.39856  -91.62914  -78.02064 #> 4 -103.11656 -144.45654 -135.48955 #> 5   10.97278  -20.25585  -44.31569 #> 6 -112.29904 -109.29257 -162.76015 truth(dat) #> i~~i  i~1 s~~s  s~1 i~~s    v    v    v    v    v    v    v    v    v    v  #>  550    0  100    0   40  500  500  500  500  500  500  500  500  500  500"},{"path":"https://haziqj.ml/brlavaan/reference/growth-curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Model specification for latent growth curve models — growth-curve","title":"Model specification for latent growth curve models — growth-curve","text":"Model specification latent growth curve models","code":""},{"path":"https://haziqj.ml/brlavaan/reference/growth-curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model specification for latent growth curve models — growth-curve","text":"","code":"txt_mod_growth_pop(rel)  txt_mod_growth(rel)"},{"path":"https://haziqj.ml/brlavaan/reference/growth-curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model specification for latent growth curve models — growth-curve","text":"rel Reliability growth curve model. Either 0.8 0.5.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/growth-curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model specification for latent growth curve models — growth-curve","text":"character string model specification, used either fitting lavaan models simulating data.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/growth-curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model specification for latent growth curve models — growth-curve","text":"","code":"txt_mod_growth_pop(0.8) #> [1] \"\\n    # intercept with coefficients fixed to 1\\n    i =~  1*Day0 + 1*Day1 + 1*Day2 + 1*Day3 + 1*Day4 +\\n          1*Day5 + 1*Day6 + 1*Day7 + 1*Day8 + 1*Day9\\n\\n    # slope with coefficients fixed to 0:9 (number of days)\\n    s =~  0*Day0 + 1*Day1 + 2*Day2 + 3*Day3 + 4*Day4 +\\n          5*Day5 + 6*Day6 + 7*Day7 + 8*Day8 + 9*Day9\\n\\n    i ~~ 550*i\\n    i ~ 0*1\\n\\n    s ~~ 100*s\\n    s ~ 0*1\\n\\n    i ~~ 40*s\\n\\n    Day0 ~~ 500*Day0\\n    Day1 ~~ 500*Day1\\n    Day2 ~~ 500*Day2\\n    Day3 ~~ 500*Day3\\n    Day4 ~~ 500*Day4\\n    Day5 ~~ 500*Day5\\n    Day6 ~~ 500*Day6\\n    Day7 ~~ 500*Day7\\n    Day8 ~~ 500*Day8\\n    Day9 ~~ 500*Day9\\n    \" txt_mod_growth(0.5) #> [1] \"\\n  # intercept with coefficients fixed to 1\\n  i =~  1*Day0 + 1*Day1 + 1*Day2 + 1*Day3 + 1*Day4 +\\n        1*Day5 + 1*Day6 + 1*Day7 + 1*Day8 + 1*Day9\\n\\n  # slope with coefficients fixed to 0:9 (number of days)\\n  s =~  0*Day0 + 1*Day1 + 2*Day2 + 3*Day3 + 4*Day4 +\\n        5*Day5 + 6*Day6 + 7*Day7 + 8*Day8 + 9*Day9\\n\\n  i ~~ i\\n  i ~ 1\\n\\n  s ~~ s\\n  s ~ 1\\n\\n  i ~~ s\\n\\n  # fix intercepts\\n  Day0 ~ 0*1\\n  Day1 ~ 0*1\\n  Day2 ~ 0*1\\n  Day3 ~ 0*1\\n  Day4 ~ 0*1\\n  Day5 ~ 0*1\\n  Day6 ~ 0*1\\n  Day7 ~ 0*1\\n  Day8 ~ 0*1\\n  Day9 ~ 0*1\\n\\n  # apply equality constraints\\n  Day0 ~~ v*Day0\\n  Day1 ~~ v*Day1\\n  Day2 ~~ v*Day2\\n  Day3 ~~ v*Day3\\n  Day4 ~~ v*Day4\\n  Day5 ~~ v*Day5\\n  Day6 ~~ v*Day6\\n  Day7 ~~ v*Day7\\n  Day8 ~~ v*Day8\\n  Day9 ~~ v*Day9\\n  \""},{"path":"https://haziqj.ml/brlavaan/reference/plugin-penalties.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for plugin penalty — plugin-penalties","title":"Functions for plugin penalty — plugin-penalties","text":"Functions plugin penalty","code":""},{"path":"https://haziqj.ml/brlavaan/reference/plugin-penalties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for plugin penalty — plugin-penalties","text":"","code":"pen_ridge(x, target = rep(0, length(x)), call = FALSE, ...)  pen_ridge_bound(x, lb, ub, call = FALSE, ...)  pen_huber(x, lb, ub, thres = 1, call = FALSE, ...)"},{"path":"https://haziqj.ml/brlavaan/reference/plugin-penalties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for plugin penalty — plugin-penalties","text":"x numeric vector. target target values components x ridge penalty. Default vector zeros. call Logical. TRUE, return name penalty function. ... Additional arguments may called. See Details. lb lower bounds components x. ub upper bounds components x. thres threshold Huber penalty.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/plugin-penalties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for plugin penalty — plugin-penalties","text":"single numeric value, penalty value.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Predicates for brlavaan objects — predicates","title":"Predicates for brlavaan objects — predicates","text":"Predicates brlavaan objects","code":""},{"path":"https://haziqj.ml/brlavaan/reference/predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predicates for brlavaan objects — predicates","text":"","code":"is_ML(x)  is_eRBM(x)  is_iRBM(x)  is_iRBMp(x, quietly = FALSE)"},{"path":"https://haziqj.ml/brlavaan/reference/predicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predicates for brlavaan objects — predicates","text":"x object class brlavaan, output fit_sem(). quietly TRUE, suppresses messages.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/predicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predicates for brlavaan objects — predicates","text":"TRUE FALSE, suppressed, message indicating plugin penalty used.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/true-values.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the true values of the models used for simulation — true-values","title":"Retrieve the true values of the models used for simulation — true-values","text":"Retrieve true values models used simulation","code":""},{"path":"https://haziqj.ml/brlavaan/reference/true-values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the true values of the models used for simulation — true-values","text":"","code":"truth_growth(rel, scale = 1)  truth_twofac(rel, meanstructure = FALSE, scale = 1)  truth(x)"},{"path":"https://haziqj.ml/brlavaan/reference/true-values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve the true values of the models used for simulation — true-values","text":"rel Reliability growth curve model. Either 0.8 0.5. scale Scaling factor data. Default 1, growth curve model data, found smaller scale (1/10) can beneficial convergence. meanstructure Logical (almost always FALSE). TRUE, include mean structure estimation. two-factor models (since growth models mean structure). x data frame generated gen_data_growth() gen_data_twofac().","code":""},{"path":"https://haziqj.ml/brlavaan/reference/true-values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the true values of the models used for simulation — true-values","text":"named numeric vector true values model.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/true-values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve the true values of the models used for simulation — true-values","text":"","code":"truth_growth(0.8) #> i~~i  i~1 s~~s  s~1 i~~s    v    v    v    v    v    v    v    v    v    v  #>  550    0  100    0   40  500  500  500  500  500  500  500  500  500  500  truth_twofac(0.5) #> fx=~x2 fx=~x3 fy=~y2 fy=~y3  fy~fx x1~~x1 x2~~x2 x3~~x3 y1~~y1 y2~~y2 y3~~y3  #>   0.70   0.60   0.70   0.60   0.25   1.00   0.49   0.36   1.00   0.49   0.36  #> fx~~fx fy~~fy  #>   1.00   1.00"},{"path":"https://haziqj.ml/brlavaan/reference/two-fac.html","id":null,"dir":"Reference","previous_headings":"","what":"Model specification for two-factor SEM models — two-fac","title":"Model specification for two-factor SEM models — two-fac","text":"Model specification two-factor SEM models","code":""},{"path":"https://haziqj.ml/brlavaan/reference/two-fac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model specification for two-factor SEM models — two-fac","text":"","code":"txt_mod_twofac_pop(rel)  txt_mod_twofac(rel)"},{"path":"https://haziqj.ml/brlavaan/reference/two-fac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model specification for two-factor SEM models — two-fac","text":"rel Reliability growth curve model. Either 0.8 0.5.","code":""},{"path":"https://haziqj.ml/brlavaan/reference/two-fac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model specification for two-factor SEM models — two-fac","text":"character string model specification, used either fitting lavaan models simulating data.","code":""}]
